<?xml version="1.0" encoding="utf-8"?>
<!-- Read this before creating packages: https://chocolatey.org/docs/create-packages -->
<!-- It is especially important to read the above link to understand additional requirements when publishing packages to the community feed aka dot org (https://chocolatey.org/packages). -->

<!-- Test your packages in a test environment: https://github.com/chocolatey/chocolatey-test-environment -->

<!--
This is a nuspec. It mostly adheres to https://docs.nuget.org/create/Nuspec-Reference. Chocolatey uses a special version of NuGet.Core that allows us to do more than was initially possible. As such there are certain things to be aware of:

* the package xmlns schema url may cause issues with nuget.exe
* Any of the following elements can ONLY be used by choco tools - projectSourceUrl, docsUrl, mailingListUrl, bugTrackerUrl, packageSourceUrl, provides, conflicts, replaces 
* nuget.exe can still install packages with those elements but they are ignored. Any authoring tools or commands will error on those elements 
-->

<!-- You can embed software files directly into packages, as long as you are not bound by distribution rights. -->
<!-- * If you are an organization making private packages, you probably have no issues here -->
<!-- * If you are releasing to the community feed, you need to consider distribution rights. -->
<!-- Do not remove this test for UTF-8: if “Ω” doesn’t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <!-- == PACKAGE SPECIFIC SECTION == -->
    <!-- This section is about this package, although id and version have ties back to the software -->
    <!-- id is lowercase and if you want a good separator for words, use '-', not '.'. Dots are only acceptable as suffixes for certain types of packages, e.g. .install, .portable, .extension, .template -->
    <!-- If the software is cross-platform, attempt to use the same id as the debian/rpm package(s) if possible. -->
    <id>tome-editor</id>
    <!-- version should MATCH as closely as possible with the underlying software -->
    <!-- Is the version a prerelease of a version? https://docs.nuget.org/create/versioning#creating-prerelease-packages -->
    <!-- Note that unstable versions like 0.0.1 can be considered a released version, but it's possible that one can release a 0.0.1-beta before you release a 0.0.1 version. If the version number is final, that is considered a released version and not a prerelease. -->
    <version>0.9-beta</version>
    <packageSourceUrl>https://github.com/npruehs/tome-editor</packageSourceUrl>
    <!-- owners is a poor name for maintainers of the package. It sticks around by this name for compatibility reasons. It basically means you. -->
    <owners>Nick Prühs</owners>
    <!-- ============================== -->

    <!-- == SOFTWARE SPECIFIC SECTION == -->
    <!-- This section is about the software itself -->
    <title>Tome</title>
    <authors>Nick Prühs</authors>
    <!-- projectUrl is required for the community feed -->
    <projectUrl>http://npruehs.github.io/tome-editor/</projectUrl>
    <iconUrl>https://github.com/npruehs/tome-editor/raw/develop/Media/Icons/Tome.png</iconUrl>
    <!-- <copyright>Year Software Vendor</copyright> -->
    <!-- If there is a license Url available, it is is required for the community feed -->
    <licenseUrl>https://github.com/npruehs/tome-editor/blob/develop/LICENSE</licenseUrl>
    <requireLicenseAcceptance>true</requireLicenseAcceptance>
    <projectSourceUrl>https://github.com/npruehs/tome-editor</projectSourceUrl>
    <docsUrl>https://github.com/npruehs/tome-editor/wiki</docsUrl>
    <!--<mailingListUrl></mailingListUrl>-->
    <bugTrackerUrl>https://github.com/npruehs/tome-editor/issues</bugTrackerUrl>
    <tags>tome game data editor</tags>
    <summary>A generic data editor for games supporting arbitrary input and output formats.</summary>
    <description>
Developing games is all about data. With game systems for modifying data and user interfaces for presenting it, finding a sophisticated data model is key to creating successful games. Even more, being able to change this data and iterate on a day-to-day basis is mandatory in today's production cycles.

Tome solves two problems that arise with every new game you build: First, you can import the definition of your game's data so game designers can create new data records and modify existing ones very conveniently. Second, you can export the results to any format your game engine understands.
    </description>
    <releaseNotes>
Integer IDs and UUIDs release.

The second beta release of Tome greatly improves overall usability of the tool, and increases the range of different types of projects that Tome can be used for.

## New Features
- **Integer IDs and UUIDs.** When creating new projects, you can now decide whether to use manually chosen string IDs, automatically incremented integer IDs or automatically generated UUIDs for all records.
- **Multi-Editing.** You can now edit the field values of multiple records with the same parent at once, and revert or remove multiple records with the same parent at once.
- **File Datatype.** The new built-in File datatype allows browsing the file system and storing relative file paths, with or without prefix and/or extension. The record table shows a preview of the selected file, if it's an image, and image file fields can be used as record icons in the record tree.

## Data
- Added placeholder for the MD5 hash of all record data.
- Added importing of list values, separated by commas.
- Added integrity checks for components without fields, unused fields, unused types, broken record references and fields that always have their default value.
- Skipping record rows with empty ids while importing.

## Usability
- Asking the user whether to save unsaved changes before creating a new project or opening an existing one.
- Disabled record context menu actions while no record is selected.
- Added deselection of records.
- Added adding new child records.
- Showing more descriptive error messages if an XLSX sheet could not be found.
- Automatically focussing line edit for entering names of new components or new derived types.
- Showing more detailed information on derived types in Custom Types window.
- Stripping whitespaces when automatically converting display names to ids in New Record window.
- Sorting type names strictly by name, instead of always showing built-in types first.
- Added progress bars when running integrity checks.
- Showing issue counts after running integrity checks.
- Added option for showing record field values along with their component names, which causes grouping of fields by component.
- Remembering the location of the last succesfully opened project.
- Added a menu item for reloading the current project.
- The record id is no longer automatically updated to reflect the record display name, except when creating new records.

## Bug Fixes
- Fixed a crash that could occur when renaming a record with children.
- Fixed a crash that could occur when validating a Required Reference Ancestor facet and the reference to validate could not be found.
- Fixed a crash that could occur when importing data with a parent record that didn't exist.
- Fixed a bug that caused the progress bar not to disappear if any error occurred while importing data from an XLSX file.
- Fixed a bug that caused CSV and Excel files not to be correctly closed after an import.
- Fixed a bug that prevented the error list from correctly being filtered by severity.
- Fixed a bug that occasionally caused lists to be incorrectly sorted.
    </releaseNotes>
    <!-- =============================== -->      

    <!-- Specifying dependencies and version ranges? https://docs.nuget.org/create/versioning#specifying-version-ranges-in-.nuspec-files -->
    <!--<dependencies>
      <dependency id="" version="__MINIMUM_VERSION__" />
      <dependency id="" version="[__EXACT_VERSION__]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_INCLUSIVE]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_EXCLUSIVE)" />
      <dependency id="" />
      <dependency id="chocolatey-uninstall.extension" />
    </dependencies>-->
    <!-- chocolatey-uninstall.extension - If supporting 0.9.9.x (or below) and including a chocolateyUninstall.ps1 file to uninstall an EXE/MSI, you probably want to include chocolatey-uninstall.extension as a dependency. Please verify whether you are using a helper function from that package. -->

    <!--<provides>NOT YET IMPLEMENTED</provides>-->
    <!--<conflicts>NOT YET IMPLEMENTED</conflicts>-->
    <!--<replaces>NOT YET IMPLEMENTED</replaces>-->
  </metadata>
  <files>
    <!-- this section controls what actually gets packaged into the Chocolatey package -->
    <file src="chocolateyinstall.ps1" target="tools" />
    <!--Building from Linux? You may need this instead: <file src="tools/**" target="tools" />-->
  </files>
</package>
