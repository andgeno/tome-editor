<?xml version="1.0" encoding="utf-8"?>
<!-- Read this before creating packages: https://chocolatey.org/docs/create-packages -->
<!-- It is especially important to read the above link to understand additional requirements when publishing packages to the community feed aka dot org (https://chocolatey.org/packages). -->

<!-- Test your packages in a test environment: https://github.com/chocolatey/chocolatey-test-environment -->

<!--
This is a nuspec. It mostly adheres to https://docs.nuget.org/create/Nuspec-Reference. Chocolatey uses a special version of NuGet.Core that allows us to do more than was initially possible. As such there are certain things to be aware of:

* the package xmlns schema url may cause issues with nuget.exe
* Any of the following elements can ONLY be used by choco tools - projectSourceUrl, docsUrl, mailingListUrl, bugTrackerUrl, packageSourceUrl, provides, conflicts, replaces 
* nuget.exe can still install packages with those elements but they are ignored. Any authoring tools or commands will error on those elements 
-->

<!-- You can embed software files directly into packages, as long as you are not bound by distribution rights. -->
<!-- * If you are an organization making private packages, you probably have no issues here -->
<!-- * If you are releasing to the community feed, you need to consider distribution rights. -->
<!-- Do not remove this test for UTF-8: if “Ω” doesn’t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <!-- == PACKAGE SPECIFIC SECTION == -->
    <!-- This section is about this package, although id and version have ties back to the software -->
    <!-- id is lowercase and if you want a good separator for words, use '-', not '.'. Dots are only acceptable as suffixes for certain types of packages, e.g. .install, .portable, .extension, .template -->
    <!-- If the software is cross-platform, attempt to use the same id as the debian/rpm package(s) if possible. -->
    <id>tome-editor</id>
    <!-- version should MATCH as closely as possible with the underlying software -->
    <!-- Is the version a prerelease of a version? https://docs.nuget.org/create/versioning#creating-prerelease-packages -->
    <!-- Note that unstable versions like 0.0.1 can be considered a released version, but it's possible that one can release a 0.0.1-beta before you release a 0.0.1 version. If the version number is final, that is considered a released version and not a prerelease. -->
    <version>0.7-alpha</version>
    <packageSourceUrl>https://github.com/npruehs/tome-editor</packageSourceUrl>
    <!-- owners is a poor name for maintainers of the package. It sticks around by this name for compatibility reasons. It basically means you. -->
    <owners>Nick Prühs</owners>
    <!-- ============================== -->

    <!-- == SOFTWARE SPECIFIC SECTION == -->
    <!-- This section is about the software itself -->
    <title>Tome</title>
    <authors>Nick Prühs</authors>
    <!-- projectUrl is required for the community feed -->
    <projectUrl>http://npruehs.github.io/tome-editor/</projectUrl>
    <iconUrl>https://github.com/npruehs/tome-editor/raw/develop/Media/Icons/Tome.png</iconUrl>
    <!-- <copyright>Year Software Vendor</copyright> -->
    <!-- If there is a license Url available, it is is required for the community feed -->
    <licenseUrl>https://github.com/npruehs/tome-editor/blob/develop/LICENSE</licenseUrl>
    <requireLicenseAcceptance>true</requireLicenseAcceptance>
    <projectSourceUrl>https://github.com/npruehs/tome-editor</projectSourceUrl>
    <docsUrl>https://github.com/npruehs/tome-editor/wiki</docsUrl>
    <!--<mailingListUrl></mailingListUrl>-->
    <bugTrackerUrl>https://github.com/npruehs/tome-editor/issues</bugTrackerUrl>
    <tags>tome game data editor</tags>
    <summary>A generic data editor for games supporting arbitrary input and output formats.</summary>
    <description>
Developing games is all about data. With game systems for modifying data and user interfaces for presenting it, finding a sophisticated data model is key to creating successful games. Even more, being able to change this data and iterate on a day-to-day basis is mandatory in today's production cycles.

Tome solves two problems that arise with every new game you build: First, you can import the definition of your game's data so game designers can create new data records and modify existing ones very conveniently. Second, you can export the results to any format your game engine understands.
    </description>
    <releaseNotes>
Stability release.

Approaching the first major release, this version addresses many stability and usability issues and provides improved diagnostics tools.

## New Features

* **Derived Types.** Field definition facets have been moved to custom types, introducing [derived types](https://github.com/npruehs/tome-editor/wiki/Custom-Data-Types#adding-derived-types) for fields. This allows fields to share common facets (such as a minimum value of zero), and validation of these facets in other custom types such as lists and maps. 
* **On-the-fly validation.** Field values are automatically validated against all facets while being entered by the user, showing immediate feedback when violating any facet.
* **Progress Bars.** Time-consuming operations, such as loading or saving very large projects (> 10,000 records), or renaming, reverting, searching or exporting records in very large projects, cause a progress bar to be displayed now.
* **Log File.** All operations are now logged to an output window and a file on disk for easier diagnostics.
* **Issue Reporter.** (Windows only) Whenever Tome crashes or the user selects "Report a Bug", he or she is presented with an Issue Reporter window that will automatically create GitHub issues.


## Data

* Added new integrity check for violated facets.
* Added export placeholders for field component, description and display name.
* Added export placeholders for application version and export time.
* Record id and display name placeholders are now available in field value templates as well.
* Documentation of all available export placeholders has been updated, avoiding confusion about which placeholder is available for which export template file and/or Tome version. See https://github.com/npruehs/tome-editor/wiki/Exporting-Data for details.

## Usability

* Adding dock widgets for Search Results, Output and Integrity Checks as tabs instead of stacking them on top of each other.
* Enumeration dropdowns provide allowed values, only.
* Preventing users from entering record names with leading or trailing whitespaces.
* Added user settings for expanding the record tree on refresh and running integrity checks after a project was opened.
* Duplicating a record now correctly retains the record set.

## Documentation

* Added YAML example export template.
* Added code generation example project.

## Bug Fixes

* Fixed a crash that could occur when changing the name of a record within a hierarchy of three or more levels.
* Fixed a bug that caused project files not to properly save references to export templates.
* Fixed a bug that caused the field definitions and custom types windows not to properly refresh when opening multiple projects during the same session.
* Fixed a bug that caused the map item window not to show the correct current key and value.
    </releaseNotes>
    <!-- =============================== -->      

    <!-- Specifying dependencies and version ranges? https://docs.nuget.org/create/versioning#specifying-version-ranges-in-.nuspec-files -->
    <!--<dependencies>
      <dependency id="" version="__MINIMUM_VERSION__" />
      <dependency id="" version="[__EXACT_VERSION__]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_INCLUSIVE]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_EXCLUSIVE)" />
      <dependency id="" />
      <dependency id="chocolatey-uninstall.extension" />
    </dependencies>-->
    <!-- chocolatey-uninstall.extension - If supporting 0.9.9.x (or below) and including a chocolateyUninstall.ps1 file to uninstall an EXE/MSI, you probably want to include chocolatey-uninstall.extension as a dependency. Please verify whether you are using a helper function from that package. -->

    <!--<provides>NOT YET IMPLEMENTED</provides>-->
    <!--<conflicts>NOT YET IMPLEMENTED</conflicts>-->
    <!--<replaces>NOT YET IMPLEMENTED</replaces>-->
  </metadata>
  <files>
    <!-- this section controls what actually gets packaged into the Chocolatey package -->
    <file src="chocolateyinstall.ps1" target="tools" />
    <!--Building from Linux? You may need this instead: <file src="tools/**" target="tools" />-->
  </files>
</package>
