<?xml version="1.0" encoding="utf-8"?>
<!-- Read this before creating packages: https://chocolatey.org/docs/create-packages -->
<!-- It is especially important to read the above link to understand additional requirements when publishing packages to the community feed aka dot org (https://chocolatey.org/packages). -->

<!-- Test your packages in a test environment: https://github.com/chocolatey/chocolatey-test-environment -->

<!--
This is a nuspec. It mostly adheres to https://docs.nuget.org/create/Nuspec-Reference. Chocolatey uses a special version of NuGet.Core that allows us to do more than was initially possible. As such there are certain things to be aware of:

* the package xmlns schema url may cause issues with nuget.exe
* Any of the following elements can ONLY be used by choco tools - projectSourceUrl, docsUrl, mailingListUrl, bugTrackerUrl, packageSourceUrl, provides, conflicts, replaces 
* nuget.exe can still install packages with those elements but they are ignored. Any authoring tools or commands will error on those elements 
-->

<!-- You can embed software files directly into packages, as long as you are not bound by distribution rights. -->
<!-- * If you are an organization making private packages, you probably have no issues here -->
<!-- * If you are releasing to the community feed, you need to consider distribution rights. -->
<!-- Do not remove this test for UTF-8: if “Ω” doesn’t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <!-- == PACKAGE SPECIFIC SECTION == -->
    <!-- This section is about this package, although id and version have ties back to the software -->
    <!-- id is lowercase and if you want a good separator for words, use '-', not '.'. Dots are only acceptable as suffixes for certain types of packages, e.g. .install, .portable, .extension, .template -->
    <!-- If the software is cross-platform, attempt to use the same id as the debian/rpm package(s) if possible. -->
    <id>tome-editor</id>
    <!-- version should MATCH as closely as possible with the underlying software -->
    <!-- Is the version a prerelease of a version? https://docs.nuget.org/create/versioning#creating-prerelease-packages -->
    <!-- Note that unstable versions like 0.0.1 can be considered a released version, but it's possible that one can release a 0.0.1-beta before you release a 0.0.1 version. If the version number is final, that is considered a released version and not a prerelease. -->
    <version>0.8-beta</version>
    <packageSourceUrl>https://github.com/npruehs/tome-editor</packageSourceUrl>
    <!-- owners is a poor name for maintainers of the package. It sticks around by this name for compatibility reasons. It basically means you. -->
    <owners>Nick Prühs</owners>
    <!-- ============================== -->

    <!-- == SOFTWARE SPECIFIC SECTION == -->
    <!-- This section is about the software itself -->
    <title>Tome</title>
    <authors>Nick Prühs</authors>
    <!-- projectUrl is required for the community feed -->
    <projectUrl>http://npruehs.github.io/tome-editor/</projectUrl>
    <iconUrl>https://github.com/npruehs/tome-editor/raw/develop/Media/Icons/Tome.png</iconUrl>
    <!-- <copyright>Year Software Vendor</copyright> -->
    <!-- If there is a license Url available, it is is required for the community feed -->
    <licenseUrl>https://github.com/npruehs/tome-editor/blob/develop/LICENSE</licenseUrl>
    <requireLicenseAcceptance>true</requireLicenseAcceptance>
    <projectSourceUrl>https://github.com/npruehs/tome-editor</projectSourceUrl>
    <docsUrl>https://github.com/npruehs/tome-editor/wiki</docsUrl>
    <!--<mailingListUrl></mailingListUrl>-->
    <bugTrackerUrl>https://github.com/npruehs/tome-editor/issues</bugTrackerUrl>
    <tags>tome game data editor</tags>
    <summary>A generic data editor for games supporting arbitrary input and output formats.</summary>
    <description>
Developing games is all about data. With game systems for modifying data and user interfaces for presenting it, finding a sophisticated data model is key to creating successful games. Even more, being able to change this data and iterate on a day-to-day basis is mandatory in today's production cycles.

Tome solves two problems that arise with every new game you build: First, you can import the definition of your game's data so game designers can create new data records and modify existing ones very conveniently. Second, you can export the results to any format your game engine understands.
    </description>
    <releaseNotes>
Data import release.

The beta release of Tome adds the ability to import data from various sources, as well as the possibility to generate a localization kit.

## New Features

* **Undo.** All operations can now be un-done and re-done. The title bar shows a small asterisk while there are any unsaved changes, and shows a confirmation dialog when trying to quit with unsaved changes.
* **Data Import.** Tome can now import record data from Excel and CSV files and Google Sheets. You can specify the column containing your record IDs, which records to parent newly imported records to, how table columns relate to your Tome fields, and which table rows to ignore, if any.
* **Localization Support.** Export templates may now add a separate field value template for localized fields (for exporting localization keys instead of current string values when exporting data). They can also use an option for exporting localized fields only (for exporting localization kits).

## Data

* Added export placeholder for record roots.
* Record parent placeholders are now available in field value templates as well.

## Usability

* Added navigation buttons and hotkeys for returning to previously selected records.
* Added a context menu to the record tree.
* Increased width of all progress bar dialogs to always fit its contents.
* Missing export template files no longer cause loading a project to stop, but log an error instead.

## Documentation

* Added CSV and XLIFF example localization export templates.

## Bug Fixes

* Fixed a bug that caused record reference dropdowns to show record display names instead of ids.
* Fixed a bug that caused the Windows Explorer or Finder window not to open when selecting Navigate To from the Project Overview window.
* Fixed a bug that caused another field value delimiter to be added when exporting, even if no more fields were succeeding after the current one (e.g. all following are skipped).
* Fixed a bug that caused another field value delimiter to be added when exporting, even if the field value string was completely empty.
* Fixed a bug that caused another record delimiter to be added when exporting, even if the record string was completely empty (e.g. every single field has been skipped).
* Fixed a bug that caused changes to fields with map types not to be properly reflected by the UI when adding or editing key-value pairs whose keys already existed.
* Fixed a bug that caused inherited field values not to be properly displayed within a hierarchy of three or more levels.
    </releaseNotes>
    <!-- =============================== -->      

    <!-- Specifying dependencies and version ranges? https://docs.nuget.org/create/versioning#specifying-version-ranges-in-.nuspec-files -->
    <!--<dependencies>
      <dependency id="" version="__MINIMUM_VERSION__" />
      <dependency id="" version="[__EXACT_VERSION__]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_INCLUSIVE]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_EXCLUSIVE)" />
      <dependency id="" />
      <dependency id="chocolatey-uninstall.extension" />
    </dependencies>-->
    <!-- chocolatey-uninstall.extension - If supporting 0.9.9.x (or below) and including a chocolateyUninstall.ps1 file to uninstall an EXE/MSI, you probably want to include chocolatey-uninstall.extension as a dependency. Please verify whether you are using a helper function from that package. -->

    <!--<provides>NOT YET IMPLEMENTED</provides>-->
    <!--<conflicts>NOT YET IMPLEMENTED</conflicts>-->
    <!--<replaces>NOT YET IMPLEMENTED</replaces>-->
  </metadata>
  <files>
    <!-- this section controls what actually gets packaged into the Chocolatey package -->
    <file src="chocolateyinstall.ps1" target="tools" />
    <!--Building from Linux? You may need this instead: <file src="tools/**" target="tools" />-->
  </files>
</package>
