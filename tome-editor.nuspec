<?xml version="1.0" encoding="utf-8"?>
<!-- Read this before creating packages: https://chocolatey.org/docs/create-packages -->
<!-- It is especially important to read the above link to understand additional requirements when publishing packages to the community feed aka dot org (https://chocolatey.org/packages). -->

<!-- Test your packages in a test environment: https://github.com/chocolatey/chocolatey-test-environment -->

<!--
This is a nuspec. It mostly adheres to https://docs.nuget.org/create/Nuspec-Reference. Chocolatey uses a special version of NuGet.Core that allows us to do more than was initially possible. As such there are certain things to be aware of:

* the package xmlns schema url may cause issues with nuget.exe
* Any of the following elements can ONLY be used by choco tools - projectSourceUrl, docsUrl, mailingListUrl, bugTrackerUrl, packageSourceUrl, provides, conflicts, replaces 
* nuget.exe can still install packages with those elements but they are ignored. Any authoring tools or commands will error on those elements 
-->

<!-- You can embed software files directly into packages, as long as you are not bound by distribution rights. -->
<!-- * If you are an organization making private packages, you probably have no issues here -->
<!-- * If you are releasing to the community feed, you need to consider distribution rights. -->
<!-- Do not remove this test for UTF-8: if “Ω” doesn’t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <!-- == PACKAGE SPECIFIC SECTION == -->
    <!-- This section is about this package, although id and version have ties back to the software -->
    <!-- id is lowercase and if you want a good separator for words, use '-', not '.'. Dots are only acceptable as suffixes for certain types of packages, e.g. .install, .portable, .extension, .template -->
    <!-- If the software is cross-platform, attempt to use the same id as the debian/rpm package(s) if possible. -->
    <id>tome-editor</id>
    <!-- version should MATCH as closely as possible with the underlying software -->
    <!-- Is the version a prerelease of a version? https://docs.nuget.org/create/versioning#creating-prerelease-packages -->
    <!-- Note that unstable versions like 0.0.1 can be considered a released version, but it's possible that one can release a 0.0.1-beta before you release a 0.0.1 version. If the version number is final, that is considered a released version and not a prerelease. -->
    <version>0.5-alpha</version>
    <packageSourceUrl>https://github.com/npruehs/tome-editor</packageSourceUrl>
    <!-- owners is a poor name for maintainers of the package. It sticks around by this name for compatibility reasons. It basically means you. -->
    <owners>Nick Prühs</owners>
    <!-- ============================== -->

    <!-- == SOFTWARE SPECIFIC SECTION == -->
    <!-- This section is about the software itself -->
    <title>Tome</title>
    <authors>Nick Prühs</authors>
    <!-- projectUrl is required for the community feed -->
    <projectUrl>http://npruehs.github.io/tome-editor/</projectUrl>
    <iconUrl>https://github.com/npruehs/tome-editor/raw/develop/Media/Icons/Tome.png</iconUrl>
    <!-- <copyright>Year Software Vendor</copyright> -->
    <!-- If there is a license Url available, it is is required for the community feed -->
    <licenseUrl>https://github.com/npruehs/tome-editor/blob/develop/LICENSE</licenseUrl>
    <requireLicenseAcceptance>true</requireLicenseAcceptance>
    <projectSourceUrl>https://github.com/npruehs/tome-editor</projectSourceUrl>
    <docsUrl>https://github.com/npruehs/tome-editor/wiki</docsUrl>
    <!--<mailingListUrl></mailingListUrl>-->
    <bugTrackerUrl>https://github.com/npruehs/tome-editor/issues</bugTrackerUrl>
    <tags>tome game data editor</tags>
    <summary>A generic data editor for games supporting arbitrary input and output formats.</summary>
    <description>
Developing games is all about data. With game systems for modifying data and user interfaces for presenting it, finding a sophisticated data model is key to creating successful games. Even more, being able to change this data and iterate on a day-to-day basis is mandatory in today's production cycles.

Tome solves two problems that arise with every new game you build: First, you can import the definition of your game's data so game designers can create new data records and modify existing ones very conveniently. Second, you can export the results to any format your game engine understands.
    </description>
    <releaseNotes>
Usability release.

With Tome starting to be used in production, this release focuses on bringing a lot of usability improvements rather than many new featues. 

## New Features

* **Maps and Vectors.** Custom [key-value maps](https://github.com/npruehs/tome-editor/wiki/Custom-Data-Types#adding-maps) and two- and three-dimensional vectors with integer and floating-point numbers. 
* **Find Usages.** Added [finding usages](https://github.com/npruehs/tome-editor/wiki/Search) of custom types, fields and records in your project.
* **Command Line Support.** Can start Tome [without showing a window](https://github.com/npruehs/tome-editor/wiki/Command-Line-Support) and run data exports now.

## Data

* Added new integrity check for unsupported list and map item types. 
* Records without any fields are no longer exported. Consequently, records whose parents don't have any fields will have their parent id reset for the export.
* Increased decimals for real fields to 4 (were 3).
* Allowing to specify whether to export roots, inner nodes and/or leafs of the record tree.
* Adding a new field to an existing component will now automatically cause that field to be added to all records who already have all exisiting fields of that component.
* Moving a field to a different component will now automatically remove that field from all records who have all other fields of that component.

## Usability

* Initially focusing display name field in field definition and record windows.
* Initially focusing New Enumeration Member window text box.
* Clearing Enumeration window when creating a new enumeration type, instead of showing contents of last edited enumeration.
* Moved field definition type above default value in Field Definition window.
* Set OK button as default in field value window, so users can immediately confirm their changes with Enter.
* In the record window, users can add all fields of a component by either checking a field or a component checkbox.
* Added description column to record field table and removed the tooltip.
* Added record icons, differentiating between records with and without fields.
* Added sorting field definitions, custom types and errors by arbitrary columns.
* Added possibility to revert whole records, effectively reverting all of their fields.
* Added possibility to duplicate records, creating a new record with the same parent and field values.
* After manually changing a record id, the record id text is no longer linked to the display name text.

## Bug Fixes

* Fixed a bug that caused export templates to create superfluous delimiters in the output files.
* Fixed a bug that prevented users from specifying negative real numbers.
* Fixed a bug that caused some components and table values of inherited fields to omitted when exporting records.

## Upgrading to Tome 0.5

With map support added to Tome, export templates require three new template files for exporting maps. See the [Exporting Data](https://github.com/npruehs/tome-editor/wiki/Exporting-Data#export-map-template-texportm) manual page for further details.
    </releaseNotes>
    <!-- =============================== -->      

    <!-- Specifying dependencies and version ranges? https://docs.nuget.org/create/versioning#specifying-version-ranges-in-.nuspec-files -->
    <!--<dependencies>
      <dependency id="" version="__MINIMUM_VERSION__" />
      <dependency id="" version="[__EXACT_VERSION__]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_INCLUSIVE]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_EXCLUSIVE)" />
      <dependency id="" />
      <dependency id="chocolatey-uninstall.extension" />
    </dependencies>-->
    <!-- chocolatey-uninstall.extension - If supporting 0.9.9.x (or below) and including a chocolateyUninstall.ps1 file to uninstall an EXE/MSI, you probably want to include chocolatey-uninstall.extension as a dependency. Please verify whether you are using a helper function from that package. -->

    <!--<provides>NOT YET IMPLEMENTED</provides>-->
    <!--<conflicts>NOT YET IMPLEMENTED</conflicts>-->
    <!--<replaces>NOT YET IMPLEMENTED</replaces>-->
  </metadata>
  <files>
    <!-- this section controls what actually gets packaged into the Chocolatey package -->
    <file src="chocolateyinstall.ps1" target="tools" />
    <!--Building from Linux? You may need this instead: <file src="tools/**" target="tools" />-->
  </files>
</package>
